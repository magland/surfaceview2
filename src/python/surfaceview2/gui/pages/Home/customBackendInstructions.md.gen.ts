const text: string = "<!-- This file was automatically generated by jinjaroot. Do not edit directly. -->\n# Using your own backend provider\n\nThe frontend (GUI) and backend (compute engine) of this web app are decoupled, allowing you to view your own data without uploading to our servers. You can also share those views with remote collaborators. Below are instructions for configuring and running your own backend provider for surfaceview2.\n\n## Run a kachery daemon\n\nSee [these instructions](https://github.com/flatironinstitute/kachery-p2p/blob/main/doc/setup_and_installation.md) to set up and run a kachery daemon on the machine where your backend provider will be running.\n\n## Install the surfaceview2 Python package\n\nIt is recommended that you use a conda environment with `Python >=3.8`. If you prefer you can reuse the same conda environment used for the kachery daemon above.\n\n```bash\n# After activating the conda environment\npip install --upgrade \"git+https://github.com/magland/surfaceview2#egg=surfaceview2&subdirectory=src/python\"\n```\n\n## Set up the Google Storage Bucket\n\nA Google Storage Bucket is used to store the cached data required for rendering the front-end visualization. Note that this bucket will not need to store the large raw files.\n\nObtain the Google application credentials for accessing the Google Storage bucket. If you are creating the bucket yourself, follow the instructions below. Otherwise, the person setting up the bucket should provide the secret credentials to you in a .json file as well as the name of the bucket. Put that .json file somewhere on the computer where your backend provider will be running. Set the permissions so no other users can read the file.\n\n## Run the backend provider\n\nTo run the backend provider, create a startup script called `surfaceview2-backend.sh`, filling in the details for `name-of-google-bucket`, `path-to-google-application-credentials-json-file`, and `choose-a-label`\n\n```bash\n#!/bin/bash\n\nexport GOOGLE_BUCKET_NAME=\"name-of-google-bucket\"\nexport GOOGLE_APPLICATION_CREDENTIALS=\"path-to-google-application-credentials-json-file\"\nexport LABEL=\"choose-a-label\"\n\nsurfaceview2-start-backend --label $LABEL --app-url https://surfaceview2.vercel.app\n```\n\nRun this script in the conda environment and keep it running in a terminal (you may want to use a tool like tmux). Make a note of the `Backend URI` as output from this program.\n\n## Select your custom backend provider in the app\n\nOn the main page of the app, click to specify a different backend provider, and paste in the URI obtained in the previous step.\n\n## Google Storage Bucket configuration\n\nThese are the instructions for creating and configuring a Google Storage Bucket to store the cached data required for rendering the front-end visualization. Note that this bucket will not need to store the large raw files. If somebody else created the bucket for you, you'll just need to get the secret credentials .json file and the name of the bucket from them.\n\n1. [Create a Google Cloud Storage Bucket](https://cloud.google.com/storage/docs/creating-buckets)\n2. Configure the bucket so that [all objects in the bucket are publicly readable](https://cloud.google.com/storage/docs/access-control/making-data-public#buckets).\n3. Configure Cross-Origin Resource Sharing (CORS) on your bucket by creating a file named `cors.json` with the following content:\n\n```json\n[\n    {\n      \"origin\": [\"http://localhost:3000\"],\n      \"method\": [\"GET\"],\n      \"responseHeader\": [\"Content-Type\"],\n      \"maxAgeSeconds\": 3600\n    },\n    {\n      \"origin\": [\"https://surfaceview2.vercel.app\"],\n      \"method\": [\"GET\"],\n      \"responseHeader\": [\"Content-Type\"],\n      \"maxAgeSeconds\": 3600\n    }\n]\n```\n\nand then using the [gsutil utility to set this CORS on your bucket](https://cloud.google.com/storage/docs/configuring-cors#configure-cors-bucket).\n\n4. [Create a Google Cloud service account](https://cloud.google.com/iam/docs/creating-managing-service-accounts#creating) and [download credentials](https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys) to a .json file on the computer where you will be running the backend compute resource\n\n5. Give the service account permission to access your bucket with the \"Storage Object Admin\" role.\n\nAfter creating the bucket, download the credentials to a .json file on the computer where you will be running the backend compute resource. Set the permissions so no other users can read the file."

export default text